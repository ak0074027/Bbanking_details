version: 2

models:
  - name: int_customer_loan_data
    description: " loan data combining loans and customer info"
    tags: ['yml_int_customer_loan_data']
    columns:
      - name: Loan_ID
        tests:
          - unique
          - not_null

      - name: Customer_ID
        tests:
          - not_null
          - relationships:
              to: customer
              field: Customer_ID

      - name: Principal_Amount
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "Principal_Amount >= 0"

      - name: Interest_Rate
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "Interest_Rate >= 0"

      - name: Start_Date
        tests:
          - not_null

      - name: End_Date
        tests:
          - not_null
          # For date logic, define a custom test if needed

      - name: Status
        tests:
          - not_null

      - name: Loan_Status
        tests:
          - not_null

      - name: Email
        tests:
          - not_null
models:
  - name: int_customer_loan_data
    description: "Loan data"
    tags: ['yml_int_customer_loan_data']
    columns:
      - name: Loan_ID
        tests:
          - unique         # Loan_ID must be unique
          - not_null       # Loan_ID cannot be null
      - name: Customer_ID
        tests:
          - not_null       # Customer_ID cannot be null (assuming loan must have customer)
          - relationships: # Foreign key test to Customer table
              to: ref('customer')
              field: Customer_ID
      - name: Principal_Amount
        tests:
          - not_null       # Principal Amount cannot be null
          - accepted_values:  # Principal must be >= 0 (using a custom test)
              values: ['>=0']  # Note: accepted_values is for discrete values; for range use custom test              
      - name: Email
        tests:
          - not_null


